estimate = exp(.pred))
xgb_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
bathrooms +
bedrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = rsample::training(modl_data_initial_split)
) %>%
recipes::step_string2factor(recipes::all_nominal()) %>%
# recipes::step_rm(model) %>%
recipes::prep()
xgb_modl_data_preproc_train <- recipes::bake(preproc_recipe,
rsample::training(xgb_modl_data_initial_split))
xgb_modl_data_preproc_test <- recipes::bake(preproc_recipe,
rsample::testing(xgb_modl_data_initial_split))
xgb_modl_data_preproc_train <- recipes::bake(xgb_preproc_recipe,
rsample::training(xgb_modl_data_initial_split))
xgb_modl_data_preproc_test <- recipes::bake(xgb_preproc_recipe,
rsample::testing(xgb_modl_data_initial_split))
xgb_modl_data_preproc_train <- recipes::bake(xgb_preproc_recipe,
rsample::training(modl_data_initial_split))
xgb_modl_data_preproc_test <- recipes::bake(xgb_preproc_recipe,
rsample::testing(modl_data_initial_split))
xgb_modl <- parsnip::boost_tree(
mode = "regression",
trees = 1000
) %>%
parsnip::set_engine("xgboost",
objective = "reg:squarederror") %>%
parsnip::fit(logLastSoldPrice ~ .,
data = xgb_modl_data_preproc_train)
xgb_preds <- parsnip::predict.model_fit(object = xgb_modl,
new_data = xgb_modl_data_preproc_test)
results2 <- xgb_modl_data_preproc_test %>%
dplyr::bind_cols(xgb_preds)
yardstick::mae(results2, truth = exp(logLastSoldPrice), estimate = exp(.pred))
knn_modl <- parsnip::nearest_neighbor(
mode = "regression",
neighbors = 11,
weight_func = "rectangular"
) %>%
parsnip::set_engine("kknn") %>%
parsnip::fit(logLastSoldPrice ~ .,
data = knn_modl_data_preproc_train)
knn_preds <- parsnip::predict.model_fit(object = knn_modl,
new_data = knn_modl_data_preproc_test)
results <- knn_modl_data_preproc_test %>%
dplyr::bind_cols(knn_preds) %>%
dplyr::bind_cols(glmnet_preds)
yardstick::mae(results,
truth = exp(logLastSoldPrice),
estimate = exp(.pred))
results <- knn_modl_data_preproc_test %>%
dplyr::bind_cols(knn_preds)
yardstick::mae(results,
truth = exp(logLastSoldPrice),
estimate = exp(.pred))
knn_modl <- parsnip::nearest_neighbor(
mode = "regression",
neighbors = 5,
weight_func = "rectangular"
) %>%
parsnip::set_engine("kknn") %>%
parsnip::fit(logLastSoldPrice ~ .,
data = knn_modl_data_preproc_train)
knn_preds <- parsnip::predict.model_fit(object = knn_modl,
new_data = knn_modl_data_preproc_test)
results <- knn_modl_data_preproc_test %>%
dplyr::bind_cols(knn_preds)
yardstick::mae(results,
truth = exp(logLastSoldPrice),
estimate = exp(.pred))
?fviz_nbclust
??fviz_nbclust
knn_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
lat +
long +
bathrooms +
bedrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = rsample::training(modl_data_initial_split)
) %>%
recipes::step_string2factor(recipes::all_nominal()) %>%
recipes::step_center(recipes::all_numeric()) %>%
recipes::step_scale(recipes::all_numeric()) %>%
recipes::step_dummy(recipes::all_nominal(), one_hot = T) %>%
# recipes::step_rm(model) %>%
recipes::prep()
knn_modl_data_preproc_train <- recipes::bake(knn_preproc_recipe,
rsample::training(modl_data_initial_split))
knn_modl_data_preproc_test <- recipes::bake(knn_preproc_recipe,
rsample::testing(modl_data_initial_split))
knn_modl <- parsnip::nearest_neighbor(
mode = "regression",
neighbors = 8,
weight_func = "rectangular"
) %>%
parsnip::set_engine("kknn") %>%
parsnip::fit(logLastSoldPrice ~ .,
data = knn_modl_data_preproc_train)
knn_preds <- parsnip::predict.model_fit(object = knn_modl,
new_data = knn_modl_data_preproc_test)
results <- knn_modl_data_preproc_test %>%
dplyr::bind_cols(knn_preds)
yardstick::mae(results,
truth = exp(logLastSoldPrice),
estimate = exp(.pred))
View(results)
table(modl_data_fnl$city)
modl_data_fnl <- home_specs %>%
tidyr::drop_na() %>%
dplyr::select(
city,
lat,
long,
bathrooms,
bedrooms,
totalRooms,
finishedSqFt,
yearBuilt,
lastSoldDate,
lastSoldPrice
) %>%
dplyr::mutate(lastSoldDate = as.Date(lastSoldDate, "%m/%d/%Y")) %>%
dplyr::mutate(city = dplyr::case_when(
city == "hebron" ~ "Hebron",
city %in% c("Mansfield Center",
"Mansfield Depot",
"Storrs",
"Storrs Mansfield") ~ "Mansfield",
city %in% c("Stafford",
"Stafford springs") ~ "Stafford Springs",
TRUE ~ city
)) %>%
# dplyr::mutate(city = factor(city)) %>%
dplyr::mutate(city = forcats::fct_lump_min(
city,
min = 100,
other_level = "Too Small"
)) %>%
dplyr::mutate(city = as.character(city)) %>%
dplyr::filter(city != "Too Small") %>%
dplyr::filter(dplyr::between(
lastSoldPrice,
100000,
1000000
)) %>%
dplyr::mutate(logLastSoldPrice = log(lastSoldPrice),
monthyear = lubridate::floor_date(lastSoldDate,
unit = "month")) %>%
dplyr::left_join(cpi_data, by = c("monthyear" = "date")) %>%
dplyr::filter(dplyr::between(bathrooms, 1, 7)) %>%
dplyr::mutate(bathrooms = (round(bathrooms * 2) / 2)) %>%
dplyr::filter(dplyr::between(bedrooms, 1, 6)) %>%
dplyr::filter(dplyr::between(finishedSqFt, 400, 10000)) %>%
dplyr::mutate(season = dplyr::case_when(
lubridate::month(lastSoldDate) %in% 3:5 ~ "Spring",
lubridate::month(lastSoldDate) %in% 6:8 ~ "Summer",
lubridate::month(lastSoldDate) %in% 9:11 ~ "Fall",
TRUE ~ "Winter"
)) %>%
tidyr::drop_na()
set.seed(123)
modl_data_initial_split <- rsample::initial_split(modl_data_fnl,
prop = 0.8)
knn_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
lat +
long +
bathrooms +
bedrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = rsample::training(modl_data_initial_split)
) %>%
recipes::step_string2factor(recipes::all_nominal()) %>%
recipes::step_center(recipes::all_numeric()) %>%
recipes::step_scale(recipes::all_numeric()) %>%
recipes::step_dummy(recipes::all_nominal(), one_hot = T) %>%
# recipes::step_rm(model) %>%
recipes::prep()
knn_modl_data_preproc_train <- recipes::bake(knn_preproc_recipe,
rsample::training(modl_data_initial_split))
knn_modl_data_preproc_test <- recipes::bake(knn_preproc_recipe,
rsample::testing(modl_data_initial_split))
knn_modl <- parsnip::nearest_neighbor(
mode = "regression",
neighbors = 8,
weight_func = "rectangular"
) %>%
parsnip::set_engine("kknn") %>%
parsnip::fit(logLastSoldPrice ~ .,
data = knn_modl_data_preproc_train)
knn_preds <- parsnip::predict.model_fit(object = knn_modl,
new_data = knn_modl_data_preproc_test)
results <- knn_modl_data_preproc_test %>%
dplyr::bind_cols(knn_preds)
yardstick::mae(results,
truth = exp(logLastSoldPrice),
estimate = exp(.pred))
set.seed(123)
modl_data_initial_split <- rsample::initial_split(modl_data_fnl,
prop = 0.8)
knn_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
lat +
long +
bathrooms +
bedrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = rsample::training(modl_data_initial_split)
) %>%
recipes::step_dummy(recipes::all_nominal(),
one_hot = T) %>%
# recipes::step_rm(model) %>%
recipes::prep()
knn_modl_data_preproc_train <- recipes::bake(knn_preproc_recipe,
rsample::training(modl_data_initial_split))
knn_modl_data_preproc_test <- recipes::bake(knn_preproc_recipe,
rsample::testing(modl_data_initial_split))
knn_modl <- parsnip::nearest_neighbor(
mode = "regression",
neighbors = 8,
weight_func = "rectangular"
) %>%
parsnip::set_engine("kknn") %>%
parsnip::fit(logLastSoldPrice ~ .,
data = knn_modl_data_preproc_train)
knn_preds <- parsnip::predict.model_fit(object = knn_modl,
new_data = knn_modl_data_preproc_test)
results <- knn_modl_data_preproc_test %>%
dplyr::bind_cols(knn_preds)
yardstick::mae(results,
truth = exp(logLastSoldPrice),
estimate = exp(.pred))
knn_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
lat +
long +
bathrooms +
bedrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = rsample::training(modl_data_initial_split)
) %>%
recipes::step_string2factor(recipes::all_nominal()) %>%
# recipes::step_rm(model) %>%
recipes::prep()
knn_modl_data_preproc_train <- recipes::bake(knn_preproc_recipe,
rsample::training(modl_data_initial_split))
knn_modl_data_preproc_test <- recipes::bake(knn_preproc_recipe,
rsample::testing(modl_data_initial_split))
knn_modl <- parsnip::nearest_neighbor(
mode = "regression",
neighbors = 8,
weight_func = "rectangular"
) %>%
parsnip::set_engine("kknn") %>%
parsnip::fit(logLastSoldPrice ~ .,
data = knn_modl_data_preproc_train)
knn_preds <- parsnip::predict.model_fit(object = knn_modl,
new_data = knn_modl_data_preproc_test)
results <- knn_modl_data_preproc_test %>%
dplyr::bind_cols(knn_preds)
yardstick::mae(results,
truth = exp(logLastSoldPrice),
estimate = exp(.pred))
rm(modl_data_fnl2)
xgb_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
bathrooms +
bedrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = rsample::training(modl_data_initial_split)
) %>%
recipes::step_string2factor(recipes::all_nominal()) %>%
# recipes::step_rm(model) %>%
recipes::prep()
xgb_modl_data_preproc_train <- recipes::bake(xgb_preproc_recipe,
rsample::training(modl_data_initial_split))
xgb_modl_data_preproc_test <- recipes::bake(xgb_preproc_recipe,
rsample::testing(modl_data_initial_split))
xgb_modl <- parsnip::boost_tree(
mode = "regression",
trees = 1000
) %>%
parsnip::set_engine("xgboost",
objective = "reg:squarederror") %>%
parsnip::fit(logLastSoldPrice ~ .,
data = xgb_modl_data_preproc_train)
# glmnet_modl <- parsnip::linear_reg(
#   mode = "regression"
# ) %>%
#   parsnip::set_engine("glmnet") %>%
#   parsnip::fit(logsaleamount ~ .,
#                data = modl_data_preproc_train)
xgb_preds <- parsnip::predict.model_fit(object = xgb_modl,
new_data = xgb_modl_data_preproc_test)
# glmnet_preds <- parsnip::predict.model_fit(object = glmnet_modl,
#                                            new_data = modl_data_preproc_test)
results2 <- xgb_modl_data_preproc_test %>%
dplyr::bind_cols(xgb_preds)
# dplyr::bind_cols(glmnet_preds)
yardstick::mae(results2, truth = exp(logLastSoldPrice), estimate = exp(.pred))
saveRDS(xgb_modl, file = "xgb_modl.RDS")
table(modl_data_fnl$bedrooms)
shiny::runApp()
runApp()
runApp()
runApp()
saveRDS(modl_data_fnl, file = "modl_data_fnl.RDS")
runApp()
runApp()
runApp()
runApp()
save(home_specs, "home_specs.RDS")
saveRDS(home_specs, "home_specs.RDS")
saveRDS(modl_data, "modl_data.RDS")
modl_data_fnl <- readRDS("~/R/ct_home_sale_pricing/modl_data_fnl.RDS")
set.seed(123)
modl_data_initial_split <- rsample::initial_split(modl_data_fnl,
prop = 0.8)
# Simple Linear Regression ------------------------------------------------
lm_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
bathrooms +
bedrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = rsample::training(modl_data_initial_split)
) %>%
recipes::step_string2factor(recipes::all_nominal()) %>%
# recipes::step_rm(model) %>%
recipes::prep()
# Core
library(tidyverse)
lm_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
bathrooms +
bedrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = rsample::training(modl_data_initial_split)
) %>%
recipes::step_string2factor(recipes::all_nominal()) %>%
# recipes::step_rm(model) %>%
recipes::prep()
# Simple Linear Regression ------------------------------------------------
lm_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
bathrooms +
bedrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = rsample::training(modl_data_initial_split)
) %>%
recipes::step_string2factor(recipes::all_nominal()) %>%
# recipes::step_rm(model) %>%
recipes::prep()
lm_modl_data_preproc_train <- recipes::bake(lm_preproc_recipe,
rsample::training(modl_data_initial_split))
lm_modl_data_preproc_test <- recipes::bake(lm_preproc_recipe,
rsample::testing(modl_data_initial_split))
lm_modl <- parsnip::linear_reg(
mode = "regression"
) %>%
parsnip::set_engine("lm") %>%
parsnip::fit(logLastSoldPrice ~ .,
data = knn_modl_data_preproc_train)
lm_preds <- parsnip::predict.model_fit(object = lm_modl,
new_data = lm_modl_data_preproc_test)
lm_modl <- parsnip::linear_reg(
mode = "regression"
) %>%
parsnip::set_engine("lm") %>%
parsnip::fit(logLastSoldPrice ~ .,
data = lm_modl_data_preproc_train)
lm_preds <- parsnip::predict.model_fit(object = lm_modl,
new_data = lm_modl_data_preproc_test)
Nearest Neighbors Approaches --------------------------------------------
knn_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
lat +
long +
bathrooms +
bedrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = rsample::training(modl_data_initial_split)
) %>%
recipes::step_string2factor(recipes::all_nominal()) %>%
# recipes::step_rm(model) %>%
recipes::prep()
knn_modl_data_preproc_train <- recipes::bake(knn_preproc_recipe,
rsample::training(modl_data_initial_split))
knn_modl_data_preproc_test <- recipes::bake(knn_preproc_recipe,
rsample::testing(modl_data_initial_split))
knn_modl <- parsnip::nearest_neighbor(
mode = "regression",
neighbors = 8,
weight_func = "rectangular"
) %>%
parsnip::set_engine("kknn") %>%
parsnip::fit(logLastSoldPrice ~ .,
data = knn_modl_data_preproc_train)
knn_preds <- parsnip::predict.model_fit(object = knn_modl,
new_data = knn_modl_data_preproc_test)
# Nearest Neighbors Approaches --------------------------------------------
knn_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
lat +
long +
bathrooms +
bedrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = rsample::training(modl_data_initial_split)
) %>%
recipes::step_string2factor(recipes::all_nominal()) %>%
# recipes::step_rm(model) %>%
recipes::prep()
knn_modl_data_preproc_train <- recipes::bake(knn_preproc_recipe,
rsample::training(modl_data_initial_split))
knn_modl_data_preproc_test <- recipes::bake(knn_preproc_recipe,
rsample::testing(modl_data_initial_split))
knn_modl <- parsnip::nearest_neighbor(
mode = "regression",
neighbors = 8,
weight_func = "rectangular"
) %>%
parsnip::set_engine("kknn") %>%
parsnip::fit(logLastSoldPrice ~ .,
data = knn_modl_data_preproc_train)
# Tidymodels
library(parsnip)
library(rsample)
library(recipes)
library(yardstick)
set.seed(123)
modl_data_initial_split <- rsample::initial_split(modl_data_fnl,
prop = 0.8)
# Simple Linear Regression ------------------------------------------------
lm_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
bathrooms +
bedrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = rsample::training(modl_data_initial_split)
) %>%
recipes::step_string2factor(recipes::all_nominal()) %>%
# recipes::step_rm(model) %>%
recipes::prep()
lm_modl_data_preproc_train <- recipes::bake(lm_preproc_recipe,
rsample::training(modl_data_initial_split))
lm_modl_data_preproc_test <- recipes::bake(lm_preproc_recipe,
rsample::testing(modl_data_initial_split))
lm_modl <- parsnip::linear_reg(
mode = "regression"
) %>%
parsnip::set_engine("lm") %>%
parsnip::fit(logLastSoldPrice ~ .,
data = lm_modl_data_preproc_train)
lm_preds <- parsnip::predict.model_fit(object = lm_modl,
new_data = lm_modl_data_preproc_test)
parsnip::linear_reg(
mode = "regression"
) %>%
parsnip::set_engine("lm") %>%
parsnip::fit(logLastSoldPrice ~ .,
data = lm_modl_data_preproc_train)
