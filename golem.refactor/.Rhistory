devtools::load_all(".")
library(tidymodels)
modl_data_fnl
xgb_preproc_recipe_fnl <- recipes::recipe(
logLastSoldPrice ~
city +
bathrooms +
bedrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = modl_data_fnl
) |>
recipes::step_string2factor(recipes::all_nominal())|>
recipes::prep()
xgb_modl_data_preproc_full <- recipes::bake(xgb_preproc_recipe, modl_data_fnl)
xgb_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
bathrooms +
bedrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = modl_data_fnl
) |>
recipes::step_string2factor(recipes::all_nominal()) |>
recipes::prep()
xgb_modl_data_preproc_full <- recipes::bake(xgb_preproc_recipe, modl_data_fnl)
xgb_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
bathrooms +
bedrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = modl_data_fnl
) |>
recipes::step_string2factor(recipes::all_nominal()) |>
recipes::prep()
xgb_modl_data_preproc_full <- recipes::bake(
xgb_preproc_recipe,
modl_data_fnl
)
xgb_modl_fnl <- parsnip::boost_tree(
mode = "regression",
trees = 1000
) |>
parsnip::set_engine(
engine = "xgboost",
objective = "reg:squarederror"
) |>
parsnip::fit(
logLastSoldPrice ~ .,
data = xgb_modl_data_preproc_full
)
newdata <- tibble::tibble(
city = "Andover",
bathrooms = 2,
finishedSqFt = 1800,
yearBuilt = 2000,
season = "Spring",
cpipctchange = 0.0336
)
predict(xgb_modl_fnl, newdata)
newdata <- tibble::tibble(
city = "Andover",
bedrooms = 2,
finishedSqFt = 1800,
yearBuilt = 2000,
season = "Spring",
cpipctchange = 0.0336
)
predict(xgb_modl_fnl, newdata)
xgb_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
bathrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = modl_data_fnl
) |>
recipes::step_string2factor(recipes::all_nominal()) |>
recipes::prep()
xgb_modl_data_preproc_full <- recipes::bake(
xgb_preproc_recipe,
modl_data_fnl
)
xgb_modl_fnl <- parsnip::boost_tree(
mode = "regression",
trees = 1000
) |>
parsnip::set_engine(
engine = "xgboost",
objective = "reg:squarederror"
) |>
parsnip::fit(
logLastSoldPrice ~ .,
data = xgb_modl_data_preproc_full
)
newdata <- tibble::tibble(
city = "Andover",
bathrooms = 2,
finishedSqFt = 1800,
yearBuilt = 2000,
season = "Spring",
cpipctchange = 0.0336
)
predict(xgb_modl_fnl, newdata)
lm_modl <- parsnip::linear_reg(
mode = "regression"
) |>
parsnip::set_engine("lm") |>
parsnip::fit(
logLastSoldPrice ~ .,
data = modl_data_fnl
)
predict(lm_modl, newdata)
lm_modl_data_preproc_full <- recipes::bake(
lm_preproc_recipe,
modl_data_fnl
)
lm_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
bathrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = modl_data_fnl
) |>
recipes::step_string2factor(recipes::all_nominal()) |>
recipes::prep()
lm_modl_data_preproc_full <- recipes::bake(
lm_preproc_recipe,
modl_data_fnl
)
lm_modl <- parsnip::linear_reg(mode = "regression") |>
parsnip::set_engine(engine = "lm") |>
parsnip::fit(
logLastSoldPrice ~ .,
data = lm_modl_data_preproc_full
)
lm_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
bathrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = modl_data_fnl
) |>
recipes::step_string2factor(recipes::all_nominal()) |>
recipes::prep()
lm_modl_data_preproc_full <- recipes::bake(
lm_preproc_recipe,
modl_data_fnl
)
lm_modl <- parsnip::linear_reg(mode = "regression") |>
parsnip::set_engine(engine = "lm") |>
parsnip::fit(
logLastSoldPrice ~ .,
data = lm_modl_data_preproc_full
)
predict(lm_modl, newdata)
lm_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
bathrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = modl_data_fnl
) |>
recipes::step_string2factor(recipes::all_nominal()) |>
recipes::prep()
lm_modl_data_preproc_full <- recipes::bake(
lm_preproc_recipe,
modl_data_fnl
)
lm_modl <- parsnip::linear_reg(mode = "regression") |>
parsnip::set_engine(engine = "lm") |>
parsnip::fit(
logLastSoldPrice ~ .,
data = lm_modl_data_preproc_full
)
predict(lm_modl, newdata)
xgb_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
bathrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = modl_data_fnl
) |>
recipes::step_string2factor(recipes::all_nominal()) |>
recipes::prep()
xgb_modl_data_preproc_full <- recipes::bake(
xgb_preproc_recipe,
modl_data_fnl
)
xgb_modl_fnl <- parsnip::boost_tree(
mode = "regression",
trees = 1000
) |>
parsnip::set_engine(
engine = "xgboost",
objective = "reg:squarederror"
) |>
parsnip::fit(
logLastSoldPrice ~ .,
data = xgb_modl_data_preproc_full
)
newdata <- tibble::tibble(
city = "Andover",
bathrooms = 2,
finishedSqFt = 1800,
yearBuilt = 2000,
season = "Spring",
cpipctchange = 0.0336
)
predict(xgb_modl_fnl, newdata)
predict(lm_modl, newdata)
saveRDS(xgb_modl_fnl, "inst/models/xgb.RDS")
saveRDS(lm_modl, "inst/models/lm.RDS")
xgboost::xgb.save(xgb_modl_fnl, "inst/models/xgb")
xgb <- readRDS("~/Ketchbrook/Ketchbrook Internal/risk-360-conf/ct_home_sale_pricing/golem.refactor/inst/models/xgb.RDS")
newdata <- tibble::tibble(
city = "Andover",
bathrooms = 2,
finishedSqFt = 1800,
yearBuilt = 2000,
season = "Spring",
cpipctchange = 0.0336
)
predict(xgb, newdata)
stats::predict(xgb, newdata)
xgb
golem::run_dev()
exp(stats::predict(model, data)) |>
round(0)
exp(stats::predict(model, data)) |>
round(0)
data
a <- readRDS("inst/models/xgb.RDS")
identical(a, model)
stats::predict(a, newdata)
stats::predict(readRDS("inst/models/xgb.RDS"), newdata)
xgb_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
bathrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = modl_data_fnl
) |>
recipes::step_string2factor(recipes::all_nominal()) |>
recipes::prep()
xgb_modl_data_preproc_full <- recipes::bake(
xgb_preproc_recipe,
modl_data_fnl
)
xgb_modl_fnl <- parsnip::boost_tree(
mode = "regression",
trees = 1000
) |>
parsnip::set_engine(
engine = "xgboost",
objective = "reg:squarederror"
) |>
parsnip::fit(
logLastSoldPrice ~ .,
data = xgb_modl_data_preproc_full
)
xgb_preproc_recipe <- recipes::recipe(
logLastSoldPrice ~
city +
bathrooms +
finishedSqFt +
yearBuilt +
cpipctchange +
season,
data = modl_data_fnl
) |>
recipes::step_string2factor(recipes::all_nominal()) |>
recipes::prep()
xgb_modl_data_preproc_full <- recipes::bake(
xgb_preproc_recipe,
modl_data_fnl
)
xgb_modl_data_preproc_full
xgb_modl_fnl <- parsnip::boost_tree(
mode = "regression",
trees = 1000
) |>
parsnip::set_engine(
engine = "xgboost",
objective = "reg:squarederror"
) |>
parsnip::fit(
logLastSoldPrice ~ .,
data = xgb_modl_data_preproc_full
)
library(parsnip)
stats::predict(readRDS("inst/models/xgb.RDS"), newdata)
lm_modl <- readRDS("~/Ketchbrook/Ketchbrook Internal/risk-360-conf/ct_home_sale_pricing/models/lm_modl.RDS")
xgb_modl <- readRDS("~/Ketchbrook/Ketchbrook Internal/risk-360-conf/ct_home_sale_pricing/models/xgb_modl.RDS")
newdata <- tibble::tibble(
city = "Andover",
bathrooms = 2,
finishedSqFt = 1800,
yearBuilt = 2000,
season = "Spring",
cpipctchange = 0.0336
)
stats::predict(lm_modl, newdata)
stats::predict(xgb_modl, newdata)
library(parsnip)
stats::predict(xgb_modl, newdata)
library(tidymodels)
stats::predict(xgb_modl, newdata)
xgb <- readRDS("~/Ketchbrook/Ketchbrook Internal/risk-360-conf/ct_home_sale_pricing/golem.refactor/inst/models/xgb.RDS")
View(xgb)
View(xgb_modl)
xgb <- readRDS("~/Ketchbrook/Ketchbrook Internal/risk-360-conf/ct_home_sale_pricing/golem.refactor/inst/models/xgb.RDS")
newdata <- tibble::tibble(
city = "Andover",
bathrooms = 2,
finishedSqFt = 1800,
yearBuilt = 2000,
season = "Spring",
cpipctchange = 0.0336
)
stats::predict(xgb, newdata)
library(parsnip)
stats::predict(xgb, newdata)
xgb <- readRDS("~/Ketchbrook/Ketchbrook Internal/risk-360-conf/ct_home_sale_pricing/golem.refactor/inst/models/xgb.RDS")
newdata <- tibble::tibble(
city = "Andover",
bathrooms = 2,
finishedSqFt = 1800,
yearBuilt = 2000,
season = "Spring",
cpipctchange = 0.0336
)
predict(xgb, newdata)
library(parsnip)
predict_class.model_fit(xgb, newdata)
predict_numeric.model_fit(xgb, newdata)
parsnip::predict.model_fit(xgb, newdata)
shiny::runApp('~/Ketchbrook/Ketchbrook Internal/risk-360-conf/ct_home_sale_pricing')
new_data
new_data <- new_data %>%
dplyr::select(
city,
bathrooms,
finishedSqFt,
yearBuilt,
cpipctchange,
season
)
new_data
train_data
explainer <- lime::lime(
train_data %>%
dplyr::select(-logLastSoldPrice),
model
)
explanation <- lime::explain(
new_data,
explainer,
n_features = 3
) %>%
dplyr::mutate(prediction = round(exp(prediction), 0))
explanation
